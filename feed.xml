<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://hsnali.me/feed.xml" rel="self" type="application/atom+xml"/><link href="https://hsnali.me/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-12-11T08:22:08+00:00</updated><id>https://hsnali.me/feed.xml</id><title type="html">blank</title><subtitle>Hassan&apos;s personal website </subtitle><entry><title type="html">Tackling the job market 1 TOML file at a time</title><link href="https://hsnali.me/blog/2024/toml-resume/" rel="alternate" type="text/html" title="Tackling the job market 1 TOML file at a time"/><published>2024-01-26T00:00:00+00:00</published><updated>2024-01-26T00:00:00+00:00</updated><id>https://hsnali.me/blog/2024/toml-resume</id><content type="html" xml:base="https://hsnali.me/blog/2024/toml-resume/"><![CDATA[<p><a href="https://github.com/hassanali1228/toml-resume">Github repo</a></p> <p>The motivation for this project has been the dreadful post-covid job market. With a huge influx of applications, it becomes harder to stand out. At a startup I worked at previously with ~35 employees, they <a href="https://www.linkedin.com/feed/update/urn:li:activity:7156228649472434176/">received 20,000 job applications within one week</a>. Solution: shut down job postings within a few days after being posted. (My) Problem: My resume is not specialized for a particular job, so I will bookmark it and come back. I never come back…</p> <p>… because it is a very mundane and mentally absorbing task to work on a resume. I need to make things easier for myself, so what do I require?</p> <ol> <li><strong>Runs offline</strong> -&gt; I don’t want to waste minutes logging onto and troubleshooting online platforms</li> <li><strong>Is responsive</strong> -&gt; need quick feedback on my changes</li> <li><strong>Not distracting</strong> -&gt; minimal text only changes without worrying about design</li> <li><strong>Scaling changes</strong> -&gt; e.g. changing the format of one work experience should apply to all work experiences</li> <li><strong>Configurability</strong> -&gt; able to configure for different applications on the fly (e.g. education vs skills on top, order of experience bullets, etc…)</li> <li><strong>Version control</strong> -&gt; Easy to rollback resume and diff between resume versions produced over time to see what works and what doesn’t (market feedback)</li> </ol> <p>Solution:</p> <pre><code class="language-mermaid">flowchart LR
    A[/TOML Config File/] --&gt; P[[Resume TOML Parser]]
    P --&gt; B[/.tex file/]
</code></pre> <p>Let’s implement it.</p> <h3 id="the-config">the config.</h3> <p>Why TOML? It’s neat and tidy. And we don’t need much hierarchy, which is where the language falls short.</p> <p>I decided to keep the file structure intuitive to how a resume is laid out. You can see the entire structure in <a href="https://github.com/hassanali1228/toml-resume/blob/main/resume.toml.example">resume.toml.example</a>. Using a config file that just stores content with structure makes it easy to track changes over time (version control).</p> <h5 id="order-matters"><strong>Order matters</strong></h5> <p>Whether it is the order of the links in the resume’s profile or the order of the content’s sections, this is how the resume will be rendered.</p> <p>e.g. this:</p> <div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[[profile.links]]</span>
<span class="py">display</span> <span class="p">=</span> <span class="s">"hsnali.me"</span>
<span class="err">...</span>

<span class="nn">[[profile.links]]</span>
<span class="py">display</span> <span class="p">=</span> <span class="s">"911"</span>
<span class="err">...</span>
</code></pre></div></div> <p>will produce a different latex compared to:</p> <div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[[profile.links]]</span>
<span class="py">display</span> <span class="p">=</span> <span class="s">"911"</span>
<span class="err">...</span>

<span class="nn">[[profile.links]]</span>
<span class="py">display</span> <span class="p">=</span> <span class="s">"hsnali.me"</span>
<span class="err">...</span>
</code></pre></div></div> <h5 id="intuitive"><strong>Intuitive</strong></h5> <p>Referring to the previous example, we use an <em>array</em> to store all the links in the profile as <strong>order matters</strong>.</p> <p>We do a similar thing for work experiences (an <code class="language-plaintext highlighter-rouge">array of tables</code>). Now, if every experience is a <code class="language-plaintext highlighter-rouge">table</code> and contains just content, updating formatting for all experiences at once becomes easy.</p> <h5 id="customizability"><strong>Customizability</strong></h5> <p>Able to customize the order of experience bullets depending on what role we are applying to.</p> <div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[work_experiences.order]</span>
<span class="py">sre</span> <span class="p">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="py">dev</span> <span class="p">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
</code></pre></div></div> <p>Consequence: build posting-relevant resume by passing a simple option such as: <code class="language-plaintext highlighter-rouge">--role=sre</code></p> <h3 id="the-parser">the parser.</h3> <p>Taking some inspiration from my compilers class, I built a stateful (👎) class to keep track of indentation and the compiled output.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="k">class</span> <span class="nc">ResumeWriter</span><span class="p">:</span>
<span class="k">def</span> <span class="err">**</span><span class="nf">init</span><span class="o">**</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
<span class="n">self</span><span class="p">.</span><span class="n">latex_str</span> <span class="o">=</span> <span class="sh">""</span>
<span class="n">self</span><span class="p">.</span><span class="n">dent</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">def</span> <span class="nf">add_line</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">line</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">latex_str</span> <span class="o">+=</span> <span class="sh">"</span><span class="s">  </span><span class="sh">"</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">dent</span> <span class="o">+</span> <span class="n">line</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span>

    <span class="k">def</span> <span class="nf">indent</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">dent</span> <span class="o">+=</span> <span class="n">value</span>

    <span class="k">def</span> <span class="nf">dedent</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">dent</span> <span class="o">-=</span> <span class="n">value</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>Note: in this case, using a stateful class made sense for readability.</p> <p>The parser flow is relatively simple, as all we have to do is iterate through the TOML file, parse each section, and store it in the <code class="language-plaintext highlighter-rouge">ResumeWriter</code> class.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">parser</span><span class="p">(</span>
    <span class="n">toml_dict</span><span class="p">:</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">],</span>
    <span class="n">enable_grayscale</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span>
    <span class="n">include_mission</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span>
    <span class="n">role</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
<span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">resume_writer</span> <span class="o">=</span> <span class="nc">ResumeWriter</span><span class="p">()</span>

    <span class="n">section_parser_mapping</span> <span class="o">=</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">profile</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="n">add_profile</span><span class="p">,</span> <span class="n">resume_writer</span><span class="p">),</span>
        <span class="sh">"</span><span class="s">skills</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="n">add_skills</span><span class="p">,</span> <span class="n">resume_writer</span><span class="p">),</span>
        <span class="sh">"</span><span class="s">education</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="n">add_education</span><span class="p">,</span> <span class="n">resume_writer</span><span class="p">),</span>
        <span class="sh">"</span><span class="s">work_experiences</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="n">add_work_experiences</span><span class="p">,</span> <span class="n">resume_writer</span><span class="p">,</span> <span class="n">include_mission</span><span class="p">,</span> <span class="n">role</span><span class="p">),</span>
        <span class="sh">"</span><span class="s">projects</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="n">add_projects</span><span class="p">,</span> <span class="n">resume_writer</span><span class="p">),</span>
    <span class="p">}</span>

    <span class="c1"># add non-configurable LaTeX at start of file
</span>    <span class="bp">...</span>

    <span class="k">for</span> <span class="n">section</span><span class="p">,</span> <span class="n">content</span> <span class="ow">in</span> <span class="n">toml_dict</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
        <span class="p">(</span><span class="n">method</span><span class="p">,</span> <span class="o">*</span><span class="n">params</span><span class="p">)</span> <span class="o">=</span> <span class="n">section_parser_mapping</span><span class="p">[</span><span class="n">section</span><span class="p">]</span> <span class="c1"># assign input variables needed for each fxn
</span>
        <span class="c1"># call each section's parser
</span>        <span class="nf">method</span><span class="p">(</span><span class="o">*</span><span class="n">params</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>

    <span class="c1"># add non-configurable LaTeX at end of file (`\end{document}`)
</span>    <span class="bp">...</span>

    <span class="k">return</span> <span class="n">resume_writer</span><span class="p">.</span><span class="n">latex_str</span>
</code></pre></div></div> <p>Implementation of individual parser functions: <code class="language-plaintext highlighter-rouge">add_profile</code>, <code class="language-plaintext highlighter-rouge">add_skills</code>, … is trivial. This parser is simple as the AST is flat, which translates to readable code (imo) as seen above.</p> <p>Here is an example of <code class="language-plaintext highlighter-rouge">add_work_experiences</code>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">add_work_experience</span><span class="p">(</span>
    <span class="n">writer</span><span class="p">:</span> <span class="n">ResumeWriter</span><span class="p">,</span>
    <span class="n">include_mission</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span>
    <span class="n">experience</span><span class="p">:</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span> <span class="o">|</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">|</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">]]],</span>
    <span class="n">role</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
<span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="bp">...</span>

    <span class="c1"># code to add experience bullets in specified order
</span>    <span class="n">order_table</span> <span class="o">=</span> <span class="nf">parse_role_table</span><span class="p">(</span><span class="n">experience</span><span class="p">[</span><span class="sh">"</span><span class="s">order</span><span class="sh">"</span><span class="p">])</span>
    <span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="n">order_table</span><span class="p">[</span><span class="n">role</span><span class="p">]:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">writer</span><span class="p">.</span><span class="nf">add_line</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="se">\\</span><span class="s">item </span><span class="si">{</span><span class="n">experience</span><span class="p">[</span><span class="sh">'</span><span class="s">content</span><span class="sh">'</span><span class="p">][</span><span class="n">idx</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">IndexError</span><span class="p">:</span>
            <span class="k">pass</span> <span class="c1"># allows for easy design re-iterations without breaking the code
</span>
    <span class="bp">...</span>


<span class="k">def</span> <span class="nf">add_work_experiences</span><span class="p">(</span>
    <span class="n">writer</span><span class="p">:</span> <span class="n">ResumeWriter</span><span class="p">,</span> <span class="n">include_mission</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span> <span class="n">role</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">work_experiences</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">],</span>
<span class="p">):</span>
    <span class="bp">...</span>
    <span class="n">writer</span><span class="p">.</span><span class="nf">indent</span><span class="p">()</span>

    <span class="k">for</span> <span class="n">work_experience</span> <span class="ow">in</span> <span class="n">work_experiences</span><span class="p">:</span>
        <span class="nf">add_work_experience</span><span class="p">(</span><span class="n">writer</span><span class="p">,</span> <span class="n">include_mission</span><span class="p">,</span> <span class="n">work_experience</span><span class="p">,</span> <span class="n">role</span><span class="p">)</span>
        <span class="bp">...</span>

    <span class="n">writer</span><span class="p">.</span><span class="nf">dedent</span><span class="p">()</span>
    <span class="bp">...</span>
</code></pre></div></div> <p>What’s to be noted here is the same <code class="language-plaintext highlighter-rouge">add_work_experience</code> function is used for each experience in the <code class="language-plaintext highlighter-rouge">work_experiences</code> array. This allows us to prototype and apply formatting to all experiences altogether quickly, unlike in a LaTeX file. Modularity is key for quality-of-life features.</p> <h3 id="extensions">extensions.</h3> <h5 id="output"><strong>output</strong></h5> <p>Now, we have our latex string as the output. The parser’s job is done, so it is up to us what we do with the output.</p> <ol> <li> <p>Send it into a transformer that builds a pdf file given the LaTex.</p> </li> <li> <p>Output it to a <code class="language-plaintext highlighter-rouge">.tex</code> file</p> </li> </ol> <h5 id="cli"><strong>CLI</strong></h5> <p>Add a CLI using a library such as: <a href="https://click.palletsprojects.com/en/8.1.x/"><code class="language-plaintext highlighter-rouge">click</code></a>. Now you should have a CLI app that you can call anywhere:</p> <p><code class="language-plaintext highlighter-rouge">toml-resume --role=sre ./resume.toml</code></p> <p>which outputs a resume pdf within seconds for a job application (<code class="language-plaintext highlighter-rouge">pdflatex</code> can be slow).</p> <p><span style="color:red">P.S.</span></p> <p>Trying a new thing here on the blog, where I share how I code. You are most welcome to code review in the comments :)</p>]]></content><author><name></name></author><category term="tech"/><category term="coding"/><category term="project"/><summary type="html"><![CDATA[Github repo]]></summary></entry><entry><title type="html">Immutability in Infrastructure and Why?</title><link href="https://hsnali.me/blog/2024/why-immutable/" rel="alternate" type="text/html" title="Immutability in Infrastructure and Why?"/><published>2024-01-20T00:00:00+00:00</published><updated>2024-01-20T00:00:00+00:00</updated><id>https://hsnali.me/blog/2024/why-immutable</id><content type="html" xml:base="https://hsnali.me/blog/2024/why-immutable/"><![CDATA[<p>Let’s first look at what immutability looks like in software.</p> <h5 id="immutable"><strong>Immutable</strong></h5> <div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/assets/jupyter/immutable.ipynb.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div> <p>Here is an immutable data structure: a tuple. Once created, it can not be modified and therefore the definition is <strong>concrete</strong>. It is this attribute that makes the object hashable.</p> <h5 id="mutable"><strong>Mutable</strong></h5> <div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/assets/jupyter/mutable.ipynb.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div> <p>Here is a mutable data structure: a pythonic list. The object can be modified at runtime. It is this attribute that makes the object unhashable. There is no reliable value to calculate a hash from the object’s definition. (We are going to ignore <code class="language-plaintext highlighter-rouge">def __hash__(self) =&gt; id(self)</code> can be used in python, as <code class="language-plaintext highlighter-rouge">id</code> is <a href="https://docs.python.org/3/library/functions.html#id">guaranteed to be unique and constant for this object during its lifetime</a>. This goes further into state invariants and compiler theory.)</p> <h2 id="immutability-in-infrastructure">Immutability in Infrastructure</h2> <p>According to <a href="https://glossary.cncf.io/immutable-infrastructure">CNCF</a>, immutable infra is <strong>infra that cannot be changed once deployed</strong>. It is a challenging problem, for example with VM deployments, users can add file system mounts and this couldn’t be tracked. Now if the VM goes down, restoration is difficult. True <a href="https://glossary.cncf.io/infrastructure-as-code/">Infrastructure as Code</a> (IaC) largely solves this problem as each “release” (immutable) is tagged with a version (our <code class="language-plaintext highlighter-rouge">hash</code>) in version control. We can implement IaC by using containerization where each (docker) image has a tag. We need further steps to ensure users can’t ssh and make <a href="https://en.wiktionary.org/wiki/breaking_change#:~:text=Noun,code%20used%20by%20multiple%20applications.">breaking changes</a>. Every change must happen through code.</p> <p>Referring back to immutability in programming, immutability enables <em>referential transparency</em> (fxn <code class="language-plaintext highlighter-rouge">y</code> always returns <code class="language-plaintext highlighter-rouge">z</code> for input: <code class="language-plaintext highlighter-rouge">x</code>) as the value the variable <code class="language-plaintext highlighter-rouge">x</code> refers to never changes. This in turn enables pure functions (<em>and by extension, functional programming</em>).</p> <p>In IaC, we see that immutable deployments ensure everything is constant for a deployment <strong><em>state</em></strong>. We can refer to this <strong><em>state</em></strong> by its release version (or <code class="language-plaintext highlighter-rouge">hash</code>). Knowing what immutability allows us to do, we can extend beyond just <em>immutability in infrastruture</em>. What if we tracked the inputs and outputs for each deployment process? We now enable <a href="https://degoes.net/articles/fp-glossary">local reasoning</a>, where inferring the correctness of the system is not dependent on <em>prior states</em> or <em>all inputs</em>. This translates to being able to pin down what file is exactly responsible for an issue in your deployment (solving by elimination is now feasible 😧). Tracking inputs in IaC becomes relatively easy when we use config files to store everything and use tools like <a href="https://www.pantsbuild.org/">pantsbuild</a> that leverage functional programming standards, transitive dependencies, and such. You might also want to look at [NixOS], a declarative operating system based on configuration files.</p> <h3 id="why">Why?</h3> <h5 id="simpler-and-safer-deployments"><strong>Simpler and Safer deployments</strong></h5> <p>Now since every change goes through code, we can incorporate CI/CD pipelines to make changes on the fly. The pipelines become easier to write as we don’t need to worry about a global state when building, it’s just chained functions: (Config A, B, C -&gt; Proc A -&gt; Artifact A, B -&gt; Proc B -&gt; Image-0.0.1).</p> <p>There also exist tests in the pipelines to ensure deployment safety. Since we can reason about functions locally and all artifacts used to build the images are <em>constant</em>, these tests become very simple to write.</p> <h5 id="faster-deployments"><strong>Faster deployments</strong></h5> <p>As we know all config files are constant and every Process will return <code class="language-plaintext highlighter-rouge">B</code> for every input <code class="language-plaintext highlighter-rouge">A</code>, we can share artifacts between different image builds. For example:</p> <pre><code class="language-mermaid">---
title: Dependency Graph
---
flowchart TD
    IA[Image A] --&gt; A{Proc A}
    IB[Image B] --&gt; A{Proc A}
    IC[Image C] --&gt; B{Proc B}
    A --&gt; CA[Config A]
    A --&gt; CB[Config B]
    B --&gt; CC[Config C]
</code></pre> <p>By caching our output at <code class="language-plaintext highlighter-rouge">Proc A</code> for its inputs, <code class="language-plaintext highlighter-rouge">Config A</code> and <code class="language-plaintext highlighter-rouge">Config B</code>, we speed up our deployment builds.</p> <p>Furthermore, we can avoid builds that do not change, for example, when only <code class="language-plaintext highlighter-rouge">Config A</code> is changed, we do not need to build <code class="language-plaintext highlighter-rouge">Image C</code>. This is a direct consequence of knowing our In’s and Out’s in the deployment process.</p> <h5 id="storage-overhead"><strong>Storage overhead</strong></h5> <p>We know immutable objects make garbage collection easy in programming languages, due to the elimination of duplicate objects. Similarly here, the artifact created by <code class="language-plaintext highlighter-rouge">Proc A</code> is not duplicated and hence lowers the storage overhead of the deployment build.</p> <p>On a large scale, when our images are tagged: ImageA.v0, ImageA.v1, ImageA.v2, …, we only need to keep a single copy of each. Without immutable deployments, we can not tag images as they can mutate. As a consequence, we do not know what is where and why it is 😨.</p> <h5 id="support-overhead"><strong>Support overhead</strong></h5> <p>As one might guess, there are going to be a lot fewer support calls now that we can see what broke the build. Ideally, most breaking changes are detected at the CI/CD level. If a new release goes bad, rollbacks are a lot easier since everything is tagged in Git. If a user adds a fs mount that doesn’t work, they can’t (ideally).</p> <h5 id="engineering-overhead"><strong>Engineering overhead</strong></h5> <p>You might need to hire a few engineers who are specialized in infra and can implement a system like this. But that’s a win in my books :)</p>]]></content><author><name></name></author><category term="infra"/><category term="tech"/><summary type="html"><![CDATA[Let’s first look at what immutability looks like in software.]]></summary></entry><entry><title type="html">A closer look into Picasso’s “what is” and “what could be”</title><link href="https://hsnali.me/blog/2024/picasso-quote/" rel="alternate" type="text/html" title="A closer look into Picasso’s “what is” and “what could be”"/><published>2024-01-01T00:00:00+00:00</published><updated>2024-01-01T00:00:00+00:00</updated><id>https://hsnali.me/blog/2024/picasso-quote</id><content type="html" xml:base="https://hsnali.me/blog/2024/picasso-quote/"><![CDATA[<blockquote> <h2 id="others-have-seen-what-is-and-asked-why-i-have-seen-what-could-be-and-asked-why-not-pablo-picasso">“Others have seen what is and asked why. I have seen what could be and asked why not.” (Pablo Picasso)</h2> </blockquote> <p>My paper was to explore this distinction in reference to two areas of knowledge: Natural Sciences and Applied Mathematics.</p> <p>I decomposed Picasso’s quote into two parts: “what is” and “what could be”. The former describes the physical world, where we can sense/feel the existence in nature, while the latter describes the non-existent, where we imagine what could exist in the physical world. My paper recognizes the individuality and interdependencies of the processes of imagination and observation/sense-perception. Through Figure 1, I have formulated how imagination influences sense-perception through personal and shared knowledge, while directly influencing the knowledge domains. This aims to show how Picasso’s “why not” is only possible because others have asked “why”.</p> <figure> <img src="/assets/img/ways_of_knowing.png" alt="Ways of Knowing Graph" width="750"/> <figcaption>Figure 1 – Connecting Imagination and Sense-Perception using shared and personal knowledge domains</figcaption> </figure> <p>The conduit of the analogous flow in this figure represents our use of language in the pursuit and sharing of knowledge. My depiction of this distinction allows for answering the paper’s central knowledge question: <strong>“To what extent do the processes of observation and imagination operate independently in the pursuit of knowledge?”</strong> Two perspectives will emerge in this paper through analyzing real-life examples: 1. Observation in the scientific method helps individuals develop knowledge about the physical world and natural laws. 2. Imagination in applied mathematics aids in conceptualizing ideas that shape the direction of the pursuit of knowledge. We also look at an example that demonstrates how knowledge of what exists helps imagine the implementation of the ‘beyond observables’, which in turn shapes our pursuit of “what is”. However, there is a flaw in the figure, where the power of public authority is misrepresented. Knowledge is only as free-flowing as the public allows, which is further discussed later.</p> <p>Considering the process of observation in the natural sciences, the sequence presented in Figure 1 helps us understand how humans observe the physical world to develop knowledge of natural laws governing matter. Theories are thereby developed on the foundations of these natural laws. The scientific method requires us to systematically analyze our perceptions/observations of the natural world to eliminate erroneous presuppositions. Empirical testing ensures correctness, for example through my experimentation with surface area to volume (SA:V) ratios, I verified that the larger the SA:V ratio is, the more liquid is diffused into the cube. This, in turn, supports our observations of “what is”, where humans are multicellular and cells divide to maintain a high SA:V ratio, to support processes such as gas exchange in the lungs. We observed here that empirical knowledge obtained in a closed-off environment (agar cubes) enriched our understanding of more holistic environments (human biology). Sense-perception’s role in adding to our personal and shared knowledge, while being directed by inquiry from our shared knowledge is demonstrated in this example.</p> <p>In applied mathematics, imagination is involved in applying our mathematical knowledge to the physical world. Innovation thereby arises where we implement the ‘beyond observables’ into the physical world by bringing the personal into the shared. Imagination is what projects the ‘beyond observables’ into our shared knowledge of “what could be”. We see this in the following project, where I designed a <a href="https://github.com/hassanali1228/Can-Crusher">can crusher</a> to increase recyclable surface area (creative thought to improve society). The solution was to crush the can laterally rather than from disc to disc, which is a challenging problem (beyond observable). It required imagination to engineer the solution, where the key was to leverage structural attributes (arcs attached to the top and bottom crushing face). It was through my personal knowledge of the forces required and shared knowledge of the structural impact of shapes, that I designed the solution. This solution was shared, which contributed to the shared knowledge of can crushers. It was questioning why something is done a certain way – what is – that motivated me to consider why it could not be done differently for optimization – why not. Returning to Figure 1, we can see how imagination operates independently in shaping our shared knowledge and using our personal knowledge.</p> <p>Now that we understand the role of observation and imagination in attaining knowledge, the dependencies between the two can be explained in Figure 1. Imagination shapes “what could be” in our shared knowledge, which guides our inquiry into nature’s guiding laws and our construction of new theories. Empirical testing conducted by scientists adds to our knowledge of the physical world, providing us with verified principles to be used in solving problems. This process is cyclical. I observed this connection when comparing my biology and engineering classes, where concentration gradients, vital in living organisms, are also used to increase the efficiency of battery cells. I conducted a lab, where I observed if water concentration is higher outside cells, it would diffuse inside, causing the blood cells to burst. Meanwhile, in engineering, I noticed that increasing the concentration gradient from the positive end to a negative end in the chemical reaction increases efficiency due to higher energy flow. Engineers use nature’s principles, proven true, in order to optimize existing technology, like batteries. Engineers imagined a better solution and made it tangible by utilizing scientific principles. The realization of this connection between sense-perception and imagination allows us to organize which processes require which <a href="https://ibbetter.com/ways-of-knowing/">ways of knowings</a>, and how they are dependant.</p> <p>My thesis/diagram faces problems in the real world, however. It fails to recognize the authority of the public domain. Our shared knowledge – represented in the public domain – can inhibit the imagination of individuals, if their ideas/innovations do not correlate with what is experimentally proven. We have seen it happen through funding being cut, “alternative” projects not gaining popularity, etcetera. Despite imagination being responsible for projecting future innovations, it remains dependent on theories previously proven true. For example, when Einstein attempted to establish the theory of relativity, few accepted it since it contradicted the widely accepted concept of <a href="https://en.wikipedia.org/wiki/Aether_(classical_element)#:~:text=According%20to%20ancient%20and%20medieval,universe%20beyond%20the%20terrestrial%20sphere.">aether</a> filling up space. This dominant concept was flawed though as it was not empirically proven, yet remained accepted due to its popularity in public. Einstein proposed his theory, where laws of gravity are the same for all non-accelerating observers. When this was later proven experimentally through the difference in time between two atomic clocks on a plane and on Earth, the cycle between imagination and sense-perception continued If theories are rejected without rationally explaining why, the flow between imagination and sense perception is interrupted, as new findings do not get added to our library of empirically tested solutions, which fuels imagination.</p> <p>Responding to our central KQ: <strong>“To what extent do the processes of observation and imagination operate independently in the pursuit of knowledge?”</strong>, this post demonstrates that imagination and observation cooperate cyclically where they have independent relations to personal and shared knowledge. The two depend on each other through knowledge domains only. Individuals require empirical testing of theories to imagine with their personal knowledge. Meanwhile, the public’s inquiry into natural laws is fuelled by other’s imagination. In reference to the title, while ‘why not’ has a bigger span than ‘why’ as one imagines what is unobservable, and ‘why’ is more concrete than ‘why not’ where our observations are proven true unlike imagination, both are vital to make progress. This organization of how we derive new knowledge shows us the observational and imaginative pieces required for innovation.</p> <p><span style="color:red">P.S.</span></p> <p>this was a paper written a few years ago by a much younger me… in hindsight, I would explain how I derived the distinction in the quote.</p> <p>I interpret this quote from the perspective: There are many who are very dialed in on inquiring about <em>what is</em>, while Picasso was exploring <em>what could be</em> when we create. Picasso was an artist during the <a href="https://en.wikipedia.org/wiki/Modernism">modernism</a> movement, where many were trying to explore, and detach from “isolated” rationalism and religion. So it makes sense why Picasso mentions his exploration of the <em>what could be</em>. This paper gives value to both <em>what is</em> and <em>what could be</em>, in order to see how both these processes operate independently and simultaneously (ideally a positive feedback loop).</p>]]></content><author><name></name></author><category term="philosophy"/><category term="musings"/><summary type="html"><![CDATA[“Others have seen what is and asked why. I have seen what could be and asked why not.” (Pablo Picasso)]]></summary></entry></feed>