<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://hsnali.me/feed.xml" rel="self" type="application/atom+xml"/><link href="https://hsnali.me/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-01-21T01:44:01+00:00</updated><id>https://hsnali.me/feed.xml</id><title type="html">blank</title><subtitle>Hassan&apos;s personal website </subtitle><entry><title type="html">Immutability in Infrastructure and Why?</title><link href="https://hsnali.me/blog/2024/why-immutable/" rel="alternate" type="text/html" title="Immutability in Infrastructure and Why?"/><published>2024-01-15T00:00:00+00:00</published><updated>2024-01-15T00:00:00+00:00</updated><id>https://hsnali.me/blog/2024/why-immutable</id><content type="html" xml:base="https://hsnali.me/blog/2024/why-immutable/"><![CDATA[<p>Let‚Äôs first look at what immutability looks like in software.</p> <h5 id="immutable"><strong>Immutable</strong></h5> <div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/assets/jupyter/immutable.ipynb.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div> <p>Here is an immutable data structure: a tuple. Once created, it can not be modified and therefore the definition is <strong>concrete</strong>. It is this attribute that makes the object hashable.</p> <h5 id="mutable"><strong>Mutable</strong></h5> <div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/assets/jupyter/mutable.ipynb.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div> <p>Here is a mutable data structure: a pythonic list. The object can be modified at runtime. It is this attribute that makes the object unhashable. There is no reliable value to calculate a hash from the object‚Äôs definition. (We are going to ignore <code class="language-plaintext highlighter-rouge">def __hash__(self) =&gt; id(self)</code> can be used in python, as <code class="language-plaintext highlighter-rouge">id</code> is <a href="https://docs.python.org/3/library/functions.html#id">guaranteed to be unique and constant for this object during its lifetime</a>. This goes further into state invariants and compiler theory.)</p> <h2 id="immutability-in-infrastructure">Immutability in Infrastructure</h2> <p>According to <a href="https://glossary.cncf.io/immutable-infrastructure">CNCF</a>, immutable infra is <strong>infra that cannot be changed once deployed</strong>. It is a challenging problem, for example with VM deployments, users can add file system mounts and this couldn‚Äôt be tracked. Now if the VM goes down, restoration is difficult. True <a href="https://glossary.cncf.io/infrastructure-as-code/">Infrastructure as Code</a> (IaC) largely solves this problem as each ‚Äúrelease‚Äù (immutable) is tagged with a version (our <code class="language-plaintext highlighter-rouge">hash</code>) in version control. We can implement IaC by using containerization where each (docker) image has a tag. We need further steps to ensure users can‚Äôt ssh and make <a href="https://en.wiktionary.org/wiki/breaking_change#:~:text=Noun,code%20used%20by%20multiple%20applications.">breaking changes</a>. Every change must happen through code.</p> <p>Referring back to immutability in programming, immutability enables <em>referential transparency</em> (fxn <code class="language-plaintext highlighter-rouge">y</code> always returns <code class="language-plaintext highlighter-rouge">z</code> for input: <code class="language-plaintext highlighter-rouge">x</code>) as the value the variable <code class="language-plaintext highlighter-rouge">x</code> refers to never changes. This in turn enables pure functions (<em>and by extension, functional programming</em>).</p> <p>In IaC, we see that immutable deployments ensure everything is constant for a deployment <strong><em>state</em></strong>. We can refer to this <strong><em>state</em></strong> by it‚Äôs release version (or <code class="language-plaintext highlighter-rouge">hash</code>). Knowing what immutability allows us to do, we can extend beyond just <em>immutability in infrastruture</em>. What if we tracked the inputs and outputs for each deployment process? We now enable <a href="https://degoes.net/articles/fp-glossary">local reasoning</a>, where inferring the correctness of the system is not dependent on <em>prior states</em> or <em>all inputs</em>. This translates to being able to pin down what file is exactly responsible for an issue in your deployment (solving by elimination is now feasible üòß). Tracking inputs in IaC becomes relatively easy when we use config files to store everything, and use tools like <a href="https://www.pantsbuild.org/">pantsbuild</a> that leverage functional programming standards, transitive dependencees, and such.</p> <h3 id="why">Why?</h3> <h5 id="simpler-and-safer-deployments"><strong>Simpler and Safer deployments</strong></h5> <p>Now since every change goes through code, we can incorporate CI/CD pipelines to make changes on the fly. The pipelines become easier to write as we don‚Äôt need to worry about a global state when building, it‚Äôs just chained functions: (Config A, B, C -&gt; Proc A -&gt; Artifact A, B -&gt; Proc B -&gt; Image-0.0.1).</p> <p>There also exist tests in the pipelines to ensure deployment safety. Since we can reason about functions locally and all artifacts used to build the images are <em>constant</em>, these tests become very simple to write.</p> <h5 id="faster-deployments"><strong>Faster deployments</strong></h5> <p>As we know all config files are constant and every Process will return <code class="language-plaintext highlighter-rouge">B</code> for every input <code class="language-plaintext highlighter-rouge">A</code>, we can share artifacts between different builds. For example:</p> <pre><code class="language-mermaid">---
title: Dependency Graph
---
flowchart TD
    ImageA --&gt; ProcA
    ImageB --&gt; ProcA
    ProcA --&gt; ConfigA 
    ProcA --&gt; ConfigB
</code></pre> <p>By caching our output at <code class="language-plaintext highlighter-rouge">Proc A</code> for inputs (<code class="language-plaintext highlighter-rouge">Config A</code> and <code class="language-plaintext highlighter-rouge">Config B</code>), we speed up our deployment builds.</p> <h5 id="e"><strong>E</strong></h5> <p>F</p>]]></content><author><name></name></author><category term="infra"/><category term="tech"/><summary type="html"><![CDATA[Let‚Äôs first look at what immutability looks like in software.]]></summary></entry><entry><title type="html">A closer look into Picasso‚Äôs ‚Äúwhat is‚Äù and ‚Äúwhat could be‚Äù</title><link href="https://hsnali.me/blog/2024/picasso-quote/" rel="alternate" type="text/html" title="A closer look into Picasso‚Äôs ‚Äúwhat is‚Äù and ‚Äúwhat could be‚Äù"/><published>2024-01-01T00:00:00+00:00</published><updated>2024-01-01T00:00:00+00:00</updated><id>https://hsnali.me/blog/2024/picasso-quote</id><content type="html" xml:base="https://hsnali.me/blog/2024/picasso-quote/"><![CDATA[<blockquote> <p>‚ÄúOthers have seen what is and asked why. I have seen what could be and asked why not.‚Äù (Pablo Picasso)</p> </blockquote> <p>My paper was to explore this distinction in reference to two areas of knowledge: Natural Sciences and Applied Mathematics.</p> <p>I decomposed Picasso‚Äôs quote into two parts: ‚Äúwhat is‚Äù and ‚Äúwhat could be‚Äù. The former describes the physical world, where we can sense/feel the existing in nature, while the latter describes the non-existent, where we imagine what could exist in the physical world. My paper recognizes the individuality and interdependencies of the processes of imagination and observation/sense-perception. Through Figure-1, I have formulated how imagination influences sense-perception through personal and shared knowledge, while directly influencing the knowledge domains. This aims to show how Picasso‚Äôs ‚Äúwhy not‚Äù is only possible because others have asked ‚Äúwhy‚Äù.</p> <figure> <img src="/assets/img/ways_of_knowing.png" alt="Ways of Knowing Graph" width="750"/> <figcaption>Figure-1 ‚Äì Connecting Imagination and Sense-Perception using shared and personal knowledge domains</figcaption> </figure> <p>The conduit of the analogous flow in this figure represents our use of language in the pursuit and sharing of knowledge. My depiction of this distinction allows for answering the paper‚Äôs central knowledge question: <strong>‚ÄúTo what extent do the processes of observation and imagination operate independently in the pursuit of knowledge?‚Äù</strong> Two perspectives will emerge in this paper through analyzing real-life examples: 1. Observation in the scientific method helps individuals develop knowledge about the physical world and natural laws. 2. Imagination in applied mathematics aids conceptualizing ideas that shape the direction of pursuit in knowledge. We also look at an example that demonstrates how knowledge of what exists helps imagine the implementation of the ‚Äòbeyond observables‚Äô, which in turn shape our pursuit of ‚Äúwhat is‚Äù. However, there is a flaw in the figure, where the power of public authority is misrepresented. Knowledge is only as free-flowing as the public allows, which is further discussed later.</p> <p>Considering the process of observation in the natural sciences, the sequence presented in Figure-1 helps understand how humans observe the physical world to develop knowledge of natural laws governing matter. Theories are thereby developed on the foundations of these natural laws. The scientific method requires us to systematically analyze our perceptions/observations of the natural world to eliminate erroneous presuppositions. Empirical testing ensures correctness, for example through my experimentation with surface area to volume (SA:V) ratios, I verified that the larger the SA:V ratio is, the more liquid is diffused into the cube. This in turn supports our observations of ‚Äúwhat is‚Äù, where humans are multicellular and cells divide to maintain a high SA:V ratio, to support processes such as gas exchange in lungs. We observed here that empirical knowledge obtained in a closed off environment (agar cubes) enriched our understanding of more holistic environments (human biology). Sense-perception‚Äôs role in adding to our personal and shared knowledge, while being directed by inquiry from our shared knowledge is demonstrated in this example.</p> <p>In applied mathematics, imagination is involved in applying our mathematical knowledge to the physical world. Innovation thereby arises where we implement the ‚Äòbeyond observables‚Äô into the physical world by bringing the personal into the shared. Imagination is what projects the ‚Äòbeyond observables‚Äô into our shared knowledge of ‚Äúwhat could be‚Äù. We see this in the following project, where I designed a <a href="https://github.com/hassanali1228/Can-Crusher">can crusher</a> to increase recyclable surface area (creative thought to improve society). The solution was to crush the can laterally rather than from disc to disc, which is a challenging problem (beyond observable). It required imagination to engineer the solution, where the key was to leverage structural attributes (arcs attached to top and bottom crushing face). It was through my personal knowledge of the forces required, and shared knowledge of structural impact of shapes, I designed the solution. This solution was shared, which contributed to the shared knowledge of can crushers. It was questioning why something is done a certain way ‚Äì what is ‚Äì that motivated me to consider why it could not be done differently for optimization ‚Äì why not. Returning to Figure-1, we can see how imagination operates independently in shaping our shared knowledge and using our personal knowledge.</p> <p>Now that we understand the role of observation and imagination in attaining knowledge, the dependencies between the two can be explained in Figure-1. Imagination shapes ‚Äúwhat could be‚Äù in our shared knowledge, which guides our inquiry of nature‚Äôs guiding laws and our construction of new theories. Empirical testing conducted by scientists adds to our knowledge of the physical world, providing us with verified principles to be used in solving problems. This process is cyclical. I observed this connection when comparing my biology and engineering classes, where concentration gradients, vital in living organisms, are also used to increase the efficiency of battery cells. I conducted a lab, where I observed if water concentration is higher outside cells, it would diffuse inside, causing the blood cells to burst. Meanwhile in engineering, I noticed that increasing the concentration gradient from the positive end to a negative end in the chemical reaction increases efficiency due to higher energy flow. Engineers use nature‚Äôs principles, proven true, in order to optimize existing technology, like batteries. Engineers imagined a better solution and made it tangible by utilizing scientific principles. The realization of this connection between sense-perception and imagination allows us to organize which processes require which ways of knowings, and how they are dependant.</p> <p>My thesis/diagram faces problems in the real-world, however. It fails to recognize the authority of the public domain. Our shared knowledge ‚Äì represented in the public domain ‚Äì can inhibit the imagination of individuals, if their ideas/innovations do not correlate with what is experimentally proven. We have seen it happen through funding being cut, ‚Äúalternative‚Äù projects not gaining popularity, etcetera. Despite imagination being responsible for projecting future innovations, it remains dependent on theories previously proven true. For example, when Einstein attempted to establish the theory of relativity, few accepted it since it contradicted the widely accepted concept of <a href="https://en.wikipedia.org/wiki/Aether_(classical_element)#:~:text=According%20to%20ancient%20and%20medieval,universe%20beyond%20the%20terrestrial%20sphere.">aether</a> filling up space. This dominant concept was flawed though as it was not empirically proven, yet remained accepted due to popularity in the public. Einstein proposed his theory, where laws of gravity are same for all non-accelerating observors. When this was later proven experimentally through the difference in time between two atomic clocks on a plane and on Earth, the cycle between imagination and sense-perception continued If theories are rejected without rationally explaining why, the flow between imagination and sense perception is interrupted, as new findings do not get added to our library of empirically tested solutions, which fuels imagination.</p> <p>Responding to our central KQ: <strong>‚ÄúTo what extent do the processes of observation and imagination operate independently in the pursuit of knowledge?‚Äù</strong>, this post demonstrates that imagination and observation cooperate cyclically where they have independent relations to personal and shared knowledge. The two depend on each other through knowledge domains only. Individuals require empirical testing of theories to imagine with their personal knowledge. Meanwhile, public‚Äôs inquiry into natural laws is fuelled by other‚Äôs imagination. In reference to the title, while ‚Äòwhy not‚Äô has a bigger span than ‚Äòwhy‚Äô as one imagines what is unobservable, and ‚Äòwhy‚Äô is more concrete than ‚Äòwhy not‚Äô where our observations are proven true unlike imagination, both are vital to make progress. This organization of how we derive new knowledge shows us the observational and imaginative pieces required for innovation.</p> <p><span style="color:red">side note</span>:</p> <p>this was a paper written a few years ago by a much younger me‚Ä¶ in hindsight, I might have interpreted the quote wrong, where Picasso was referring to people inhibiting innovation by looking at what already exists, rather than looking at what could be when we create</p>]]></content><author><name></name></author><category term="philosophy"/><category term="musings"/><summary type="html"><![CDATA[‚ÄúOthers have seen what is and asked why. I have seen what could be and asked why not.‚Äù (Pablo Picasso)]]></summary></entry></feed>